    //    const value = AsyncStorage.getItem('photos')
    //                 if(value !==null){
    //                     setState({
    //                         photos: value,
    //                     });
    //                     setIsLoading(false);
    //                     console.log("VALUE FROM ASYNC STORAGE "+ value)
    //                 }
                // }catch(e){
                //    console.log('error with async getData');
                // }  
           
            //  console.log("I HAVE THIS DATA STORED: " + getData());
            //  setParams({
            //      transferredImage: null
            //  })


 // AsyncStorage.getItem('photos')
        //     .then((photos) => {
        //         const photo = photos ? JSON.parse(photos) : [];
        //         photo.push(transferredImage);
        //         AsyncStorage.setItem('photos', JSON.stringify(photo));
        //         setState({
        //             check: true,
        //         })
        //         //true if transferred image from camera is pushed to array
        //        return () =>{
        //            photo.clear();
        //        }
        //     });  
           
// const getData = async () => {
    //     try {
    //         const value = await AsyncStorage.getItem('photos')
    //         if(value !==null){
    //             setState({
    //                 photos: JSON.parse(value),
    //             })
                
    //         }
    //     }catch(e){
    //        console.log('error with async getData');
    //     }  
    // }
   


    //    const value = AsyncStorage.getItem('photos')
    //                 if(value !==null){
    //                     setState({
    //                         photos: value,
    //                     });
    //                     setIsLoading(false);
    //                     console.log("VALUE FROM ASYNC STORAGE "+ value)
    //                 }
                // }catch(e){
                //    console.log('error with async getData');
                // }  
           
            //  console.log("I HAVE THIS DATA STORED: " + getData());
            //  setParams({
            //      transferredImage: null
            //  })

            // //navigating value of image from photoLogic to this page
    // let { transferredImage } = route.params
    // console.log(" transferred URI "+ transferredImage);
//console.log('retrieved images'+ state.photos)
// const { countImageAdded } = route.params
// console.log ('Number of pictures taken (EvidenceSub. page) : '+ countImageAdded);

    
    // const { getLatitudeTransferred } = route.params
    // const { getLongitudeTransferred } = route.params
    // const { getTimeTransferred } = route.params
    // const { getDateTransferred } = route.params
    // const { getTimeOfTransfer } = route.params



    // const getData = async () => {
    //     try {
    //         const value = await AsyncStorage.getItem('photos')
    //         if(value !==null){
    //             setState({
    //                 photos: JSON.parse(value),
    //             })
                
    //         }
    //     }catch(e){
    //        console.log('error with async getData');
    //     }  
    // }

  //    onPressIn={()=>{
                        //         takePicture(); 
                        //     }
                        //   }
                        //    onPressOut={()=>{
                            
                        //    
                        //     //setTimeout(()=>navigation.navigate('EvidenceSubmission'),100)
                        //     }
                        //    }   

  renderRecording = () =>{
    const { isRecording } = camState;
    const backgroundColor = isRecording ? 'white' : 'black';
    const action = isRecording ? stopVideo : takeVideo;
    const button = isRecording ? renderStopRecBtn(): renderRecBtn();
    return (
        <TouchableOpacity
            onPress={()=> action()}>
            {button}
        </TouchableOpacity>
        
    );
}
  
  
  
  
  stopVideo = async () => {
        await camera.stopRecording();
        setCamState({isRecording: false});
    }
    renderRecBtn(){
        return <Text> REC</Text>
    }











<View  style={{backgroundColor: 'gray' , flex: 1, }}>
                    <Text>
                        Telephone:
                    </Text>
                        <TextInput 
                            style={styles.textInputBoxStyle}
                            onChangeText={(text) => 
                            setInputtedText(text)
                            }
                            value={nameState}
                            multiline={false}
                            enablesReturnKeyAutomatically={true}
                        > 
                        </TextInput>
                </View>
                <View  style={{backgroundColor: 'red' , flex: 1}}>
                        <Text>
                            Email:
                        </Text>
                            <TextInput 
                                style={styles.textInputBoxStyle}
                                onChangeText={(text) => 
                                setInputtedText(text)
                                }
                                value={nameState}
                                multiline={false}
                                enablesReturnKeyAutomatically={true}
                            > 
                            </TextInput>
                    </View>
                <View  style={{backgroundColor: 'pink' , flex: 1}}>
                    <TouchableOpacity>
                        <Text>
                            submit
                        </Text>
                    </TouchableOpacity>
                </View>










    import React, { Component } from 'react';
import { AppRegistry,
    StyleSheet, Text, 
    PermissionsAndroid, View, StatusBar,
    Image, TouchableOpacity} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import StartRecord from 'react-native-vector-icons/Ionicons';
import StopRecord from 'react-native-vector-icons/Ionicons';
import Arrow from 'react-native-vector-icons/FontAwesome5';
import Play from 'react-native-vector-icons/Ionicons';

/**This functional component is called when any individual audio file is clicked */

export default function AudioRecorderPlayer({navigation, Route}){
    
    const[audioUriState, setAudioUriState] = useState('');
    const[isRecordingStart, setIsRecordingStart] = useState(false);
    const[isRecordingStop, setIsRecordingStop] = useState(false);
    const[isRecordingSaved, setIsRecordingSaved] = useState(false);
           
        
    useEffect(() => {
        effect
       
        return () => {
            cleanup
        }
    }, [input])


    
    
    return(
        <SafeAreaView style= {styles.container}>
            <StatusBar barStyle="light-content" backgroundColor="#174060"/>
                
            
            <View style={{flex:0.9, backgroundColor:'#1D5179', justifyContent:'center'
                ,borderBottomRightRadius:5, borderBottomLeftRadius:5}}>
                <Arrow
                    name={"long-arrow-alt-left"}
                    size={25}
                    color="white"
                    style={{marginLeft:17, alignContent: 'center'}}
                    />  
                <Text style={{fontSize:20, fontStyle:'normal', color:'white', fontFamily:'roboto',
                    alignSelf:'center', margin:10, marginTop:10}}>
                    New Recording
                </Text>
                <Text style={{color:'white',justifyContent:'center',fontFamily:'roboto',alignSelf:'center'
                    ,marginBottom: 5, marginTop: 5}}>
                    07:50am
                </Text>
            </View>
            <View style={{flex: 2, backgroundColor: ''}}>
                <Image 
                style={styles.recordImage}
                source = { require('../assets/recordingImage.png') }
                    backgroundColor={''}
                />
            </View>
                
            <View style={styles.recorderTimer}> 
                <Text style={{fontSize: 18, paddingTop: 0}}>
                    00:00:00
                </Text>
            </View>
            < style={{flexDirection: 'row'}}>
            <View  style={{flex: 0.7, backgroundColor:''}}>
                <TouchableOpacity>
                    <Play
                    name={"play-back-outline"}
                    size={25}
                    color="white"
                    style={{margin:10, alignContent: 'center'}}
                    />   
                </TouchableOpacity>  
            </View>
            <View  style={{flex: 0.7, backgroundColor:''}}>
                <TouchableOpacity
                    style={styles.startRecord}>
                    <Play
                    name={"play"}
                    size={25}
                    color="white"
                    style={{margin:10, alignContent: 'center'}}
                    />   
                </TouchableOpacity>  
            </View>

            <View  style={{flex: 0.7, backgroundColor:''}}>
                <TouchableOpacity>
                    <Play
                    name={"play-back-outline"}
                    size={25}
                    color="white"
                    style={{margin:10, alignContent: 'center'}}
                    />   
                </TouchableOpacity>  
            </View>

                    
        </SafeAreaView> 
     );
}

const styles = StyleSheet.create ({
    container: {
        flex: 1,
        flexDirection: 'column', 
        color: '#F0F0F0',
    },
    recordImage: {
        width: 300,
        height: 300,
        justifyContent: 'center',
        alignSelf:'center',
        marginTop: 0,
    
    },
    startRecord:{
        alignSelf: 'center',
        alignContent:'center',
        borderRadius: 100,
        elevation: 7,
        backgroundColor: '#cf352e'
    },
    recordButton: {
        width: 0,
        height: 0,
        justifyContent: 'center',
        alignSelf:'center',
       
      },
    recorderTimer: {
        flex: 0.9,
        paddingTop: 0,
        alignItems: 'center',
        alignContent: 'center'
    }
});
