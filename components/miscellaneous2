import React, { useState, useEffect } from 'react';

import {
    StyleSheet, View, Text, Image, TouchableOpacity,StatusBar,
    TextInput, FlatList,ActivityIndicator,
} from 'react-native';
import globalStyle from '../components_styles/globalStyle';
import { ScrollView, State, TouchableWithoutFeedback } from 'react-native-gesture-handler';
import SafeAreaView from 'react-native-safe-area-view';
import { Picker } from '@react-native-community/picker';
import Microphone from 'react-native-vector-icons/FontAwesome5';
import  Add from 'react-native-vector-icons/Ionicons';
import  Trash from 'react-native-vector-icons/Ionicons';
import AsyncStorage from '@react-native-community/async-storage';
import ArrowBack from 'react-native-vector-icons/Ionicons';



export default function EvidenceSubmission ({navigation}){

//Incidence
    const [state, setState]= useState({
        selectedIncidence: 'Please select incidence',
        photos:[],
        check: false, // checks if captured image retrieved here is added to array.
        description:''

    });
   

// //navigating value of image from photoLogic to this page
    // let { transferredImage } = route.params
    // console.log(" transferred URI "+ transferredImage);
//console.log('retrieved images'+ state.photos)
// const { countImageAdded } = route.params
// console.log ('Number of pictures taken (EvidenceSub. page) : '+ countImageAdded);

    
    // const { getLatitudeTransferred } = route.params
    // const { getLongitudeTransferred } = route.params
    // const { getTimeTransferred } = route.params
    // const { getDateTransferred } = route.params
    // const { getTimeOfTransfer } = route.params


/**
* This method clears Storage and gallery on submit, to 
* allow new images into storage and gallery
*/
   const clearStorage= async() =>{
    try{
        await AsyncStorage.clear();

    } catch(exception){
        console.log('error clearing  items');
    }
    console.log('items cleared (Evidence Page)');

    }
   

   /*set the state of incident selected */
  const setIncidence = (itemSelected) => {
       setState({
          selectedIncidence: itemSelected, 
       })
   }

  const setDescription = (inputtedText) => {
       setState({
           description: inputtedText,
       })
   }
//loading images from camera roll on component mount
const [isLoading, setIsLoading] = useState(true);

    useEffect(()=> {
        console.log('EVIDENCE USE_EFFECT, I AM MOUNTED');
        
        // AsyncStorage.getItem('photos')
        //     .then((photos) => {
        //         const photo = photos ? JSON.parse(photos) : [];
        //         photo.push(transferredImage);
        //         AsyncStorage.setItem('photos', JSON.stringify(photo));
        //         setState({
        //             check: true,
        //         })
        //         //true if transferred image from camera is pushed to array
        //        return () =>{
        //            photo.clear();
        //        }
        //     });  
           
        /*Get the stored captured images from async storage*/   
        const getData = async () => {
            try {
                const value = await AsyncStorage.getItem('photos')
                if(value !==null){
                    setState({
                        photos: (JSON.parse(value)).reverse(),
                    })
                    setIsLoading(false);
                    
                }
            }catch(e){
            console.log('error with async getData');
            }  
        }
        getData();
    //    const value = AsyncStorage.getItem('photos')
    //                 if(value !==null){
    //                     setState({
    //                         photos: value,
    //                     });
    //                     setIsLoading(false);
    //                     console.log("VALUE FROM ASYNC STORAGE "+ value)
    //                 }
                // }catch(e){
                //    console.log('error with async getData');
                // }  
           
            //  console.log("I HAVE THIS DATA STORED: " + getData());
            //  setParams({
            //      transferredImage: null
            //  })
    }, []);

    if(isLoading){
        console.log("Is Loading State: "+ isLoading)
        // return(
        //     // <View>
        //     //     <ActivityIndicator size="large" color="blue"/>
        //     // </View>
        // )
        
    }


  
/**
 * This method navigates to photo preview page
 * @param path image retrieved from flat list item in evidence page
 */
    const  navigateToPhotoPreview = (path) =>{
        navigation.navigate('PhotoPreviewer',
        {
            transferredImageItem: path,
        
        })      
    }


    return(
        <SafeAreaView style= {globalStyle.MainContainer}>
       
        <StatusBar barStyle="light-content" backgroundColor="#174060"/>
            <View flexDirection='column' flex={0.456} marginTop={30} 
            marginRight ={5}
            marginLeft ={5}
            borderWidth={0.5}
            borderRadius={3}
            borderColor='#7E7E7E'>
                <View>
                    <FlatList
                        data= {state.photos}
                        keyExtractor={(item, index)=> index}
                        renderItem={ ({ item}) => (  
                          <TouchableOpacity onPress={() => navigateToPhotoPreview(item) }>
                             <Image
                                style={{ width:70, height:75,margin:0.5, resizeMode:'cover'}}   
                                source = {{ uri: "file://"+ item}} 
                                // source = {{ uri: item}} 
                                //source = {{ uri: item.node.image.uri}} 
                            />
                          </TouchableOpacity>   
                           )   
                        }
                        numColumns = {5}
                   />
                </View>  
            </View>
            <TouchableOpacity style={styles.addPhotoButton}
                    onPress={()=>{navigation.goBack()}}>
                    <Add
                       name={'add'}
                       size={30}
                       color="white"  
                    />   
            </TouchableOpacity>

            <View style={{justifyContent: 'center', margin:5 ,flex: 1.2}}>
                <View style={{borderWidth: 1, 
                    borderColor:'#C4C4C4',
                    borderRadius:5,
                    width: 270, 
                    marginLeft: 5,
                    marginBottom: 0,
                    marginTop: 15}}>
                    <Picker
                        selectedValue ={state.selectedIncidence}
                        style={{height:45, width: 270, 
                        fontFamily:'roboto', 
                        fontStyle:'normal',
                        fontWeight:'normal'}}
                        onValueChange={(itemValue, itemIndex) =>
                            setIncidence({
                                selectedIncidence: itemValue,
                            })
                        }
                    >
                        
                    <Picker.Item label="Non-Compliance" value="Non-Compliance"/>
                    <Picker.Item label="Logistics" value="Logistics"/>
                    <Picker.Item label="Harassment" value="Harassment"/>
                    <Picker.Item label="Interference" value="Interference"/>
                    <Picker.Item label="Violence" value="Violence"/>
                    <Picker.Item label="Delays" value="Delays"/>
                    <Picker.Item label="Confusion" value="Confusion"/>
                    <Picker.Item label="Chaos" value="Chaos" />
                    <Picker.Item label="Power Failure" value="Power Failure"/>
                    </Picker>
                </View>
                <View marginBottom={0} marginLeft={5} marginTop={15}>
                    <Text style={styles.textStyle}>
                        Description
                    </Text>
                </View>
                <View style={{flexDirection:'row'}} >
                    <View>
                        <TextInput 
                            style={{height: 70, 
                            width: 270,
                            borderRadius: 8,
                            borderColor:'#C4C4C4',
                            borderWidth: 1, marginLeft: 5}}
                            onChangeText={(text) => 
                                setDescription(text)
                          }
                            value={state.text}
                            multiline={true}
                            enablesReturnKeyAutomatically={true}
                        >
                            {state.description}
                        </TextInput>
                    </View>
                        <TouchableOpacity style={styles.microphoneButton}>
                            <Microphone name="microphone" 
                            size={21} 
                            color='white'
                            /> 
                        </TouchableOpacity>
                </View>
                <View marginBottom={0} marginLeft={0} marginTop={15}  marginBottom={15} >
                    <View style={{flexDirection: 'row'}}>
                        <Text style={{margin:10,marginRight:20,
                                fontFamily:'roboto', 
                                fontSize: 14,
                                fontWeight:'bold', 
                                }}>
                            Submit as
                        </Text>
                        <View style={styles.radioCircumference}>
                            <TouchableOpacity style={styles.radioButton}></TouchableOpacity>
                        </View>
                        <Text style={{marginLeft: 5, marginRight: 0, marginTop: 10}}>anonymous</Text>  
                        <Text style={{marginLeft: 10, marginRight: 10, marginTop: 10, fontWeight:'bold'}}> or </Text>
                        <View style={styles.radioCircumference}>
                            <TouchableOpacity style={styles.radioButton}></TouchableOpacity>
                        </View>
                        <Text style={{marginTop: 10,marginLeft: 5, marginRight: 0}}>Sign In</Text>                   
                    </View>
                </View>
            
                <TouchableOpacity
                    style={styles.button}
                    onPress={()=>clearStorage()}
                    >
                    <Text style={{color:'white', 
                        alignSelf:'center',
                        fontSize: 18,
                        }}>
                        Next
                    </Text>
                </TouchableOpacity>   
            </View>
        
        </SafeAreaView> 
    );
}

const styles = StyleSheet.create({

    imageContainer: {
        flexDirection: 'row',
        
    },
    text:{
        color: "#E6E4E4",
        fontSize: 6,
        opacity: 1,

    },
    image: {
        width: 90,
        height: 90,
        marginHorizontal: 10,
        marginTop: 10,
        marginBottom: 10,
        resizeMode: 'cover',
    },
    contentContainer: {
        paddingVertical: 20,
      
    },
   
    moreIcon: {
        alignSelf: 'center',  
        justifyContent:'center',
        margin: 1,
    },
    moreView:{
        backgroundColor:'#E7E7E7',
        borderRadius:20,
        alignSelf:'center',
        elevation: 6,
        shadowOpacity: 0.5,
        shadowRadius: 5,
        marginBottom: 10,
    },
    textStyle:{
        fontSize: 14,   
        fontFamily: 'roboto',
        fontWeight: 'bold'
    },
    button: {
        width: 100,
        height: 45,
        margin: 10,
        marginTop: 20,
        borderRadius: 5,
        justifyContent: 'center',
        backgroundColor: '#1D5179',
        alignSelf:'center'
    },
    microphoneButton:{
        width: 48,
        height: 48,
        borderRadius:100,
        backgroundColor:'#1D5179',
        alignSelf: 'center',
        marginLeft: 15,
        justifyContent:'center',
        alignItems: 'center',
    },
    addPhotoButton:{
        height: 44,
        justifyContent: 'center',
        alignItems: 'center',
        width: 44,
        borderRadius: 100,
        backgroundColor: '#1D5179',
        position: 'absolute',
        right: 12,
        top: 5, 
    },
    trashButton: {
        width: 30,
        height: 40,
        marginLeft: 250,
        marginTop: 5,
        justifyContent: 'center',
    },
    radioButton: {
        width: 19,
        height: 19,
        borderRadius: 100,
        margin: 1.5,
    },
    radioCircumference: {
        borderRadius: 100, 
        borderWidth: 1, 
        borderColor:'black',
        width:24, 
        height: 24,
        marginTop: 7,
    },

    
})